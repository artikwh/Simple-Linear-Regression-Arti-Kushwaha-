# -*- coding: utf-8 -*-
"""Simple_Linear_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CSvPQfwmixXxKPIVNl0ZkOM0LGee1SLa

# **Name : Arti Kushwaha**
## **Simple Linear Regression Algorithm**
Here we will use Scikit_Learn library to implement regression algorithm. We will start with simple linear regression model involving two variables.

In this task, we will predict the percentage of marks of a student when the number of hours they studied are given.

**1. Importing required libraries:**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
# %matplotlib inline

"""**2. Loading data from remote CSV file link**"""

Link = "http://bit.ly/w-data"
data = pd.read_csv(Link)
print("Data Loaded successfully")

data.head()

data.shape

data.describe()

"""**3. Plotting of Data to see relationship between the data points using matplotlib library.**"""

data.plot(x='Hours', y='Scores', style='og')  
plt.title('Relationship between Hours Studied and Percentage Scored')  
plt.xlabel('No. of Hours Studied')  
plt.ylabel('Percentage Scored by Student')
plt.grid()  
plt.show()

"""**In the above graph, percentage scored are linearly increasing with the number of hours studied so we can conclude that there is a linear positive relationship between the number of hours studied and percentage of score.**

**4. Dividing the data into input(X) and Output(Y)**
"""

x = data.iloc[:, :1].values  
y = data.iloc[:, 1:].values

x

y

"""**5. Splitting the data into training and test sets using Scikit_Learn's built-in train_test_split() method**"""

from sklearn.model_selection import train_test_split  
x_train, x_test, y_train, y_test = train_test_split(x, y, 
                            test_size=0.3, random_state=0)

"""**6. Import and Train the Linear Regression Model**

"""

from sklearn.linear_model import LinearRegression  
model = LinearRegression()  
model.fit(x_train, y_train) 

print("Training complete.")

"""**7. Plotting the Best-fit line or Regression line**"""

regression_line = model.coef_*x+model.intercept_    # y = m*x + c
plt.scatter(x, y, color='y')
plt.plot(x, line, color= 'g')
plt.grid()
plt.show()

"""**8. Predict the output on test data**

"""

y_pred = model.predict(x_test)

results = pd.DataFrame({'Actual Scores': y_test.ravel(), 'Predicted Scores': y_pred.ravel()})  
results

"""**Predict Score if Student studies for 9.25 hours**"""

hours = 9.25
hours_array = np.array(hours).reshape(1, -1)
output = model.predict(hours_array)
print("Number of Hours = {}".format(hours))
print("Predicted Score = {}".format(output[0][0]))

"""**8. Evaluate the model to check performance using mean_absolute_error**


"""

from sklearn import metrics 
error =  metrics.mean_absolute_error(y_test, y_pred)
print('Mean Absolute Error:', error)